class TreeNode {
    int val;
    TreeNode left;
    TreeNode right;

    TreeNode() {
    }

    TreeNode(int val) {
        this.val = val;
    }

    TreeNode(int val, TreeNode left, TreeNode right) {
        this.val = val;
        this.left = left;
        this.right = right;
    }

    private static TreeNode listToTreeHelper(List<Integer> lst, TreeNode cur, int i) {
        if (i < lst.size()) {
            cur = new TreeNode(lst.get(i));
            cur.left = listToTreeHelper(lst, cur.left, 2 * i + 1);
            cur.right = listToTreeHelper(lst, cur.right, 2 * i + 2);
        }
        return cur;
    }

    public static TreeNode listToTree(List<Integer> lst) {
        return listToTreeHelper(lst, null, 0);
    }

    public static List<Integer> treeToList(TreeNode root) {
        if (root == null) {
            return new ArrayList<>();
        }
        List<Integer> lst = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while (queue.size() > 0) {
            TreeNode node = queue.poll();
            lst.add(node.val);
            if (node.left != null) {
                queue.add(node.left);
            }
            if (node.right != null) {
                queue.add(node.right);
            }
        }
        return lst;
    }
}
