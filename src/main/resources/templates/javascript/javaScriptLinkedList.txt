class ListNode {
    constructor(val=0, next=null) {
        this.val = val;
        this.next = next;
    }

    static listToLinkedList(lst) {
        if (lst.length === 0) {
            return null;
        }
        const first = new ListNode(lst[0]);
        let cur = first;
        for (let i = 1; i < lst.length; i++) {
            cur.next = new ListNode(lst[i]);
            cur = cur.next;
        }
        return first;
    }

    static listToLinkedListWithCycle(lst, pos) {
        if (lst.length === 0) {
            return null;
        }
        if (pos >= lst.length || pos < -1) {
            throw "Cycle position must be either a valid position in the linked list or -1.";
        }
        const first = new ListNode(lst[0]);
        let connection = first;
        let cur = first;
        for (let i = 1; i < lst.length; i++) {
            cur.next = new ListNode(lst[i]);
            cur = cur.next;
            if (i == pos) {
                connection = cur;
            }
        }
        if (pos != -1) {
            cur.next = connection;
        }
        return first;
    }

    static linkedListToList(node) {
        const lst = [];
        let cur = node;
        while (cur) {
            lst.push(cur.val);
            cur = cur.next;
        }
        return lst;
    }

    static linkedListSame(node1, node2) {
        if (!node1 && !node2) {
            return true;
        }
        if (!node1 || !node2 || node1.val != node2.val) {
            return false;
        }
        return ListNode.linkedListSame(node1.next, node2.next);
    }
}
