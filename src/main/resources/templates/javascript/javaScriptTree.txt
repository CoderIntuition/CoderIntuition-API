class TreeNode {
    constructor(val=0, left=null, right=null) {
        this.val = val;
        this.left = left;
        this.right = right;
    }

    static #listToTreeHelper(lst, cur, i) {
        if (i < lst.length) {
            const cur = new TreeNode(lst[i]);
            cur.left = #listToTreeHelper(cur.left, 2 * i + 1);
            cur.right = #listToTreeHelper(cur.right, 2 * i + 2);
        }
        return cur;
    }

    static listToTree(lst) {
        return listToTreeHelper(lst, null, 0);
    }

    static treeToList(root) {
        if (!root) {
            return [];
        }
        const lst = [];
        const queue = [root];
        while (queue.length > 0) {
            const node = queue.shift();
            lst.push(node.val);
            if (node.left) {
                queue.push(node.left);
            }
            if (node.right) {
                queue.push(node.right);
            }
        }
        return lst;
    }

    static treeSame(node1, node2) {
        if (!node1 && !node2) {
            return true;
        }
        if (!node1 || !node2 || node1.val != node2.val) {
            return false;
        }
        return treeSame(node1.left, node2.left) && treeSame(node1.right, node2.right);
    }
}
