class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def ___list_to_linked_list(lst):
    if len(lst) == 0:
        return None
    first = ListNode(lst[0])
    cur = first
    for i in range(1, len(lst)):
        cur.next = ListNode(lst[i])
        cur = cur.next
    return first

def ___list_to_linked_list_with_cycle(lst, pos):
    if len(lst) == 0:
        return None
    if pos >= len(lst) or pos < -1:
        raise Exception("Cycle position must be either a valid position in the linked list or -1.")
    first = ListNode(lst[0])
    connection = first
    cur = first
    for i in range(1, len(lst)):
        cur.next = ListNode(lst[i])
        cur = cur.next
        if (i == pos):
            connection = cur
    if pos != -1:
        cur.next = connection
    return first

def ___linked_list_to_list(node):
    lst = []
    cur = node
    while cur:
        lst.append(cur.val)
        cur = cur.next
    return lst

def ___linked_list_same(node1, node2):
    if not node1 and not node2:
        return True
    if not node1 or not node2 or node1.val != node2.val:
        return False
    return ___linked_list_same(node1.next, node2.next);
