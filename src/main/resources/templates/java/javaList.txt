public static List<${underlyingType}> stringToList${i}(String str) throws Exception {
    if (!str.startsWith("[") || !str.endsWith("]")) {
        throw new Exception("Input " + str + " is not a valid list (missing brackets)");
    }
    if (str.equals("[]")) {
        return new ArrayList<>();
    }
    List<String> strList = Arrays.asList(str.substring(1, str.length() - 1).split(" *, *"));
    List<${underlyingType}> convertedList = new ArrayList<>();
    for (String item : strList) {
        try {
            ${parseUnderlyingTypeCode}
            convertedList.add(val);
        } catch (Exception ex) {
            throw new Exception("Input " + str + " is not a valid list (all elements must be of type ${underlyingType})");
        }
    }
    return convertedList;
}

public static boolean listSame(List<${underlyingType}> l1, List<${underlyingType}> l2) {
    if (l1.size() != l2.size()) {
        return false;
    }

     List<${underlyingType}> sortedL1 = l1.stream().sorted().collect(Collectors.toList());
     List<${underlyingType}> sortedL2 = l2.stream().sorted().collect(Collectors.toList());

     return l1.equals(l2);
}
